result-view{
  match : ReturnAction1(this){
    from-output:Action1
  }

  message{  //다이얼
    //if(size(this)>0){
      if(this.isFind){
        if(size(this)>1){
          template ("#{value(this.bodyName)}에 좋은 음식들입니다.")
        }
        else{
          template ("#{value(this.bodyName)}에 좋은 음식은 #{value(this.foodName)}입니다.")
        }
      }
      else{
        template ("#{value(this.bodyName)}에 대한 정보가 없어요.")
      }
  }

  render{   //레이아웃
    if(this.isFind){
      if (size(this) > 1) {   //여러개 일 때 리스트로 보여줌
        list-of (this) {
          //has-details (true)
          where-each (item) {
            layout-macro (list-food-card) {
              param (returnAction1) {
                expression (item)
              }
            }
          }
        }
      } 
      else-if (size(this) == 1) { //하나일 때or선택했을 때 상세 화면으로 보여줌
        layout-macro (detail-food-about-body){
          param (returnAction1){
            expression (this)
          }
        }
      }
    }
    else{
      layout{
        section{
          content{
            paragraph{  //이메일로 연락달라하기
              style(Detail_M)
              value("아직 건강챙겨가 배울게 많은 것 같아요. 더 똑똑해질 건강챙겨를 위해 무슨 정보인지 아래의 이메일로 보내주실래요?")
            }
            paragraph{
              style(Detail_M_Soft)
              value("yeongmi7110@gmail.com")
            }
            paragraph{
              style(Detail_M)
              value("감사합니다. 열심히 공부해서 건강챙겨가 건강을 챙겨줄게요!")
            }
          }
        }
      }
    }
  }

  conversation-drivers{ //hint
    conversation-driver{
      if(this.isFind&&size(this)==1){
        template ("#{value(this.foodName)} 레시피 알려줘")
      }
    }
  }
}
